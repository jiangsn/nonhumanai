SECTION 1. Introduction: The widespread availability of high resolution displays and rapid advancements in deep learning based image pro- cessing has recently sparked increased interest in super-resolution. In particular, approaches to single image super resolution (SISR) have achieved impressive results by learning the mapping from low-resolution (LR) to high-resolution (HR) images based on data. Typically, the upscaling function is a deep neural network (DNN) that is trained in a fully supervised manner with tuples of LR patches and corresponding HR targets. DNNs are able to learn abstract feature representations in the input image that allow some degree of disambiguation of the fine details in the HR output.
Figure 1: Examples of our 4× and 8× upsampling results. Our model without GAN sets a new state-of-the-art benchmark in terms of psnr/ssim; our GAN-extended model yields high perceptual quality and is able to hallucinate plausible details up to 8× upsampling ratio. 
Most existing SISR networks adopt one of the two following direct approaches. The first upsamples the LR image with a simple interpolation method (e.g., bicubic) in the beginning and then essentially learns how to deblur [7], [20], [33]. The second proposes upsampling only at the end of the processing pipeline, typically using a sub-pixel convolution layer [30] or transposed convolution layer to recover the HR result [8], [23], [30], [37]. While the first class of approaches has a large memory footprint and a high computational cost, as it operates on upsampled images, the second class is more prone to checkerboard artifacts [27] due to simple concatenation of upsampling layers. Thus it remains challenging to achieve high quality results for large upsampling factors. In this paper, we propose a method that is progressive both in architecture and training. We design the network to reconstruct a high resolution image in intermediate steps by progressively performing a 2 x upsampling of the input from the previous level. As building blocks for each level of the pyramid, we propose dense compression units, which are adapted from dense blocks [16] to suit super-resolution. Compared to existing progressive SISR models [21], [22], we improve the reconstruction accuracy by simplifying the information propagation within the network; furthermore we propose to use an asymmetric pyramidal structure with more layers in the lower levels to enable high upsampling ratios while remaining efficient. To obtain more photoreal-istic results, we adopt the GAN framework [14] and design a discriminator that matches the progressive nature of our generator network by operating on the residual outputs of each scale. Such paired progressive design allows us to obtain a multi-scale generator with a unified discriminator in a single training.
Figure 2: Asymmetric pyramidal architecture. More dcus are allocated in the lower pyramid level to improve the reconstruction accuracy and to reduce memory consumption. 
In this framework, we can naturally utilize a form of curriculum learning, which is known to improve training [4] by organizing the learning process from easy (small upsampling factors) to hard (large upsampling factors). Compared to common multi-scale training, the proposed training strategy not only improves results for all upsampling factors, but also significantly shortens the total training time and stabilizes the GAN training. We evaluate our progressive multi-scale approach against the state-of-art on a variety of datasets, where we demonstrate improved performance in terms of traditional error measures (e.g., PSNR) as well as perceptual quality, particularly for larger upsampling ratios. 

SECTION 2. Related Work: Single image super-resolution techniques (SISR) have been an active area of investigation for more than a decade [12]. The ill-posed nature of this problem has typically been tackled using statistical techniques: most notably image priors such as heavy-tailed gradient distributions [10], [29], gradient profiles [32], multi-scale recurrence [13], self-examples [11], and total variation [26]. In contrast, exemplar-based approaches such as nearest-neighbor [12] and sparse dictionary learning [36], [38], [40] have exploited the inherent redundancy of large-scale image datasets. Recently, Dong et al. [6] showed the superiority of a simple three-layer convolutional network (CNN) over sparse coding techniques. Since then, deep convolutional architectures have consistently pushed the state-of-art forward. Direct Vs. Progressive Reconstruction: Direct recon- struction techniques [7], [20], [23], [24], [33]–, [37] upscale the image to the desired spatial resolution in a single step. Early approaches [7], [20], [33] upscale the LR image in a preprocessing step. Thus, the CNN learns to deblur the input image. However, this requires the network to learn a feature representation for a high-resolution image which is computationally expensive [30]. To overcome this limitation, many approaches opt for operating on the low dimensional features and perform upsampling at the end of the network via sub-pixel convolution [30] or transposed convolution. A popular progressive reconstruction approach is described by LapSRN by Lai et al. [21]. In their work, the upsampling follows the principle of Laplacian pyramids, i.e. each level learns to predict a residual that should explain the difference between a simple upscale of the previous level and the desired result. Since the loss functions are computed at each scale, this provides a form of intermediate supervision. Lai et al. improved their method with deep and wider recursive architecture and multi-scale training [22]. While [22] improved the accuracy, there remains a considerable gap between the top-performing approach in terms of PSNR [24]. In particular, as we show in Section 4.2, the Laplacian pyramidal structure aggravates the optimization difficulty. Furthermore, the recursive pyramids result in quadratic growth of computation in the higher pyramid level, becoming the bottleneck for reducing runtime and expanding the network capability. Lastly, in addition to a progressive generator, we also propose a progressive discriminator along with a progressive training strategy. Perceptual Loss Functions: The aforementioned tech- niques optimize the reconstruction error by minimizing the \ell_{1}ℓ1 -norm and descendants such as the Charbonnier penalty function [21]. Although these approaches yield small reconstruction errors, they are unable to hallucinate perceptually plausible high-frequencies details. To this end, Ledig et al. [23] proposed a perceptual loss function consisting of a content loss that captures perceptual similarities and an adversary to steer the reconstruction closer to the latent manifold of natural solutions. Based on this, Sajjadi et al. [28] apply an additional texture loss to encourage similarity with the original image. In contrast to these works, we design a discriminator that operates on the residual outputs of each scale and train progressively with a strategy based on curriculum learning. With this, our GAN model is able to upsample perceptually pleasing SR images for multiple scales up to 8\ \times8 ×. 

SECTION 3. Progressive Multi-Scale Super-Resolution: Given a set of nn LR input images with corresponding HR target images \{(\pmb{x}_{1}, \pmb{y}_{1}), \ldots, (\pmb{x}_{n}, \pmb{y}_{n})\}{(xx1,yy1),…,(xxn,yyn)}, we consider the problem of estimating an upscaling function uu: X\rightarrow YX→Y, where XX and YY denote the space of LR and HR images, respectively. Finding a suitable parameterisation for the upscaling function uu for large upsampling ratios, is challenging: the larger the ratio, the more complex the function class required. To this end, we propose a progressive solution to learn the upscaling function uu. In the following, we propose our pyramidal architecture, ProSR, for multi-scale super-resolution in Section 3.1 and 3.2. In Section 3.3 we propose ProGanSR, a progressive multi-scale GAN for perceptual enhancement. Finally, we discuss a curriculum learning scheme in Section 3.4. 3.1. Pyramidal Decomposition: We propose a pyramidal decomposition of uu into a series of simpler functions u_{0}, \ldots, u_{s}u0,…,us. Each function-or level-is tasked with refining the feature representation and performing a 2 × upsampling of its own input. Each level of the pyramid consists of a cascade of dense compression units (DCUs) followed by a sub-pixel convolution layer. We assign more DCUs in the lower pyramid levels, resulting in the asymmetric structure. Having more computation power in the lower pyramid not only reduces the memory consumption but also increases the receptive field with respect to the original image, hence it outperforms the symmetric variant in terms of reconstruction quality and runtime. While the decomposition of uu is shared among the pyramid levels, we also use two scale-specific sub-networks, denoted by v_{s}vs and r_{s}rs, which allow for an individual transformation between scale-varying image space and a normalized feature space. A schematic illustration of our progressive upsampling architecture is detailed in Figure 2.
Figure 3: Schematic illustration of the blending procedure in curriculum training for the generator (top) and the discriminator (bottom). v_{scale}, r_{s}vscale,rs denote the scale-specific input and reconstruction layer, and u_{s}us denotes the pyramid of scale s. \alphas.α varies from 0 to 1 during blending to control the impact of the new pyramid. 
To simplify learning, the network is designed to output the residual \begin{equation*}
\mathcal{R}_{s}(\pmb{x})=(r_{s}\circ u_{s}\circ\cdots \circ u_{0}\circ v_{s})(\pmb{x})
\tag{1}
\end{equation*}Rs(xx)=(rs∘us∘⋯∘u0∘vs)(xx)(1)View Source\begin{equation*}
\mathcal{R}_{s}(\pmb{x})=(r_{s}\circ u_{s}\circ\cdots \circ u_{0}\circ v_{s})(\pmb{x})
\tag{1}
\end{equation*} w.r.t a fixed upsampling of the input \varphi_{s}(\pmb{x})φs(xx) through e.g. bicubic interpolation. Thus, for a given scaling factor ss the estimated HR image can be computed as \begin{equation*}
\hat{\pmb{y}}=\mathcal{R}_{s}(\pmb{x})+\varphi_{s}(\pmb{x}).
\tag{2}
\end{equation*}yy^=Rs(xx)+φs(xx).(2)View Source\begin{equation*}
\hat{\pmb{y}}=\mathcal{R}_{s}(\pmb{x})+\varphi_{s}(\pmb{x}).
\tag{2}
\end{equation*} Notably, our network doesn't follow the Laplacian pyramid principle like in [21], [22], i.e. the intermediate sub-net outputs are neither supervised nor used as base image in the subsequent level. Such design performs favorably over the Laplacian alternative, as it simplifies the backward-pass and thus reduces the optimization difficulty. Additionally we do not downsample the groundtruth to create labels, which is done for the intermediate supervision in [21], [22]. This avoids artefacts that may result from subsampling. 3.2. Dense Compression Units: We base the construction of each pyramid level on the recently proposed DenseNet architecture [16]. Similarly to skip connections [15], dense connections improve gradient flow alleviating vanishing and shattered gradients [3]. The core component in each level of the pyramid is a dense compression unit (DCU), which consists of a modified densely connected block followed by 1 × 1 convolution CONv(1,1). The original dense layer is composed of BN-RELU-CONv(1,1)-BN-RELU-CONV(3,3). Following recent practice in super-resolution [9], [24], [39], we remove all batch normalizations. However, since the features from previous layers may have varying scales, we also remove the first ReLU to rescale the features with Conv(1-1). This leads to a modified dense layer composition: CONv(1,1)-RELU-CONv(3,3). Contrary to DenseNet, we break the dense connection at the end of each DCU with a Conv(1,1) compression layer, which re-assembles information efficiently and leads to a slight performance gain in spite of the breakage of dense connection. For a very deep model we apply pyramid-wise as well as local residual links to improve the gradient propagation as shown in Figure 2. 3.3. Progressive Gan: Generative adversarial networks (GANs) [14] have emerged as a powerful method to enhance the perceptual quality of the upsampled images [14], [23], [28] in SISR. However, training GANs is notoriously difficult and success at applying GANs to SISR has been limited to single-scale upsampling at relatively low target resolutions. In order to enable multi-scale GAN-enhanced SISR, we propose a modular and progressive discriminator network similar to the generator network proposed in the previous section. As illustrated in the bottom of Figure 3, the architecture has a reverse pyramid structure \{u_{2}, u_{1}, u_{0}\}{u2,u1,u0}, where each level gradually reduces the spatial dimension of the input image with Avgpooling. Similar to the generator, scale-specific image transformation layers v_{scale}vscale are implied before each pyramid. To accommodate the multi-scale outputs from the generator, the network is fully convolutional and outputs a small patch of features similar to PatchGAN [18]. The complete specs of the discriminator can be found in the supplemental material. Similar to the generator network, the discriminator operates on the residual between the original and bicubic up-sampled image. This allows both generator and discriminator to concentrate only on the important sources of variation which are not already well captured by the standard upsampling operation. Since these regions are challenging to upsample well, they correspond to the largest perceptual errors. This can also be viewed as subtracting a data-dependent baseline from the discriminator which helps to reduce variance. As the training objective, we use the more stable least square loss instead of the original cross-entropy loss [25]. Denoting the predicted residual and real residual as \hat{\pmb{r}}rr^ and \pmb{r}rr, the discriminator loss and generator loss for a training example of scale ss can be expressed as \begin{align*}
\mathcal{L}_{\mathcal{D}_{s}}^{i}= & (\mathcal{D}(\hat{\pmb{r}}_{i}^{s}))^{2}+(\mathcal{D}(\pmb{r}_{i}^{s})-1)^{2}
\tag{3}\\
\mathcal{L}_{\mathcal{R}_{\mathrm{s}}}^{i}= & (\mathcal{D}(\hat{\pmb{r}}_{i}^{s})-1)^{2}+
\tag{4}\\
& \sum_{k\in\{2,4\}}\Vert\Phi_{k}(\hat{\pmb{y}}_{i})-\Phi_{k}(\pmb{y}_{i})\Vert^{2},
\end{align*}LiDs=LiRs=(D(rr^si))2+(D(rrsi)−1)2(D(rr^si)−1)2+∑k∈{2,4}∥Φk(yy^i)−Φk(yyi)∥2,(3)(4)View Source\begin{align*}
\mathcal{L}_{\mathcal{D}_{s}}^{i}= & (\mathcal{D}(\hat{\pmb{r}}_{i}^{s}))^{2}+(\mathcal{D}(\pmb{r}_{i}^{s})-1)^{2}
\tag{3}\\
\mathcal{L}_{\mathcal{R}_{\mathrm{s}}}^{i}= & (\mathcal{D}(\hat{\pmb{r}}_{i}^{s})-1)^{2}+
\tag{4}\\
& \sum_{k\in\{2,4\}}\Vert\Phi_{k}(\hat{\pmb{y}}_{i})-\Phi_{k}(\pmb{y}_{i})\Vert^{2},
\end{align*} where \Phi_{k}Φk denotes the k-th pooling layer input in VGG16 [31]. 3.4. Curriculum Learning: Curriculum learning [4] is a strategy to improve training by gradually increasing the difficulty of the learning task. It is often used in sequence prediction tasks and in sequential decision making problems where large speedups in training time and improvements in generalisation performance can be obtained. The pyramidal decomposition of uu allows us to apply curriculum learning in a natural way. The loss for a training example (\pmb{x}_{i}^{s}, \pmb{y}_{i})(xxsi,yyi) of scale ss can be defined as \begin{equation*}
\mathcal{L}_{\mathcal{R}_{s}}^{i}=\Vert \mathcal{R}_{s}(\pmb{x}_{i}^{s})+\varphi_{s}(\pmb{x}_{i}^{s})-\pmb{y}_{i}\Vert_{1}
\tag{5}
\end{equation*}LiRs=∥Rs(xxsi)+φs(xxsi)−yyi∥1(5)View Source\begin{equation*}
\mathcal{L}_{\mathcal{R}_{s}}^{i}=\Vert \mathcal{R}_{s}(\pmb{x}_{i}^{s})+\varphi_{s}(\pmb{x}_{i}^{s})-\pmb{y}_{i}\Vert_{1}
\tag{5}
\end{equation*} where \pmb{x}_{i}^{s}xxsi corresponds to s\timess× downsampled version of \pmb{y}_{i}yyi. Then the goal at scale ss is to find \begin{equation*}
\hat{\theta}_{s}=\mathop{\text{argmin}}_{\theta_{s}} \sum_{s^{\prime}\leq s}\sum_{i}\mathcal{L}_{\mathcal{R}_{\mathrm{s}^{\prime}}}^{i},
\tag{6}
\end{equation*}θ^s=argminθs∑s′≤s∑iLiRs′,(6)View Source\begin{equation*}
\hat{\theta}_{s}=\mathop{\text{argmin}}_{\theta_{s}} \sum_{s^{\prime}\leq s}\sum_{i}\mathcal{L}_{\mathcal{R}_{\mathrm{s}^{\prime}}}^{i},
\tag{6}
\end{equation*} where \theta_{s} parameterises all functions in and below the current scale (u_{0}, v_{0}, r_{0}, \ldots, u_{s}, v_{s}, r_{s}) according to our pyramidal network shown in Figure 2. Our training curriculum starts by training only the 2 × portion of the network. When we proceed to a new phase in the curriculum (e.g. \mathrm{to}\ 4\times), a new level of the pyramid is gradually blended in to reduce its impact on the previously trained layers. As Figure 3 shows, for the generator the predicted residual \hat{\pmb{r}}_{s} at scale s is a linear combination of the outputs from level s and s-1, while in analog for the discriminator, the output features from the new pyramid are combined with the output of the scale-specific input layer from the previous level v_{scale-1}, before entering the trained pyramids \{u_{s-1}, \ldots, u_{0}\}. Bilinear interpolation and Avgpool are used to match the spatial dimensions before merging. In both cases, \alpha controls the influence of the new pyramid and thus it varies from 0to 1 during the blending procedure. As a result we incrementally add training pairs of the next scale. While a similar idea was proposed in [19] to improve high-resolution image generation, we use this strategy in the context of multi-scale training. Finally, to assemble the batches, we randomly select one of the scales s to avoid mixing batch statistics as suggested in [2]. Compared to simple multi-scale training where training examples from different scales are simultaneously fed to the network, such progressive training strategy greatly shortens the total training time. Furthermore, it yields a further performance gain for all included scales compared to single-scale and simple multi-scale training and alleviates instabilities in GAN training. 

SECTION 4. Evaluation: Before we compare with popular state-of-the-art approaches, we first discuss the benefits of each of our proposed components using a small 24-layer model. All presented models are trained with the DIV2K [34] training set, which contains 800 high-resolution images. The training details are listed in the supplemental material. For evaluation, the benchmark datasets Set5 [5], Set14 [41], BSD100 [1], Urban100 [17], and the DIV2K validation set [34] are used. As it is commonly done in SISR, all evaluations are conducted on the luminance channel. 4.1. Ablation Study:  Table 1: Overview of experiments in the ablation study. The introduction of dcus, block division, an asymmetric pyramid layout, and curriculum learning allow to consistently increase reconstruction quality. Reported PSNR values refer to 4× results of set14. The runtime is tested for 4× upscaling of 128 × 128 image.
Table 1 summarizes the consistent increase in reconstruction quality stemming from each proposed component. As a baseline, we start from a single dense block with two sub-pixel upsampling layers in the end and a residual connection from the LR input to the final output. In the following, we describe the individual steps in more detail. Dense Compression UnitsTo demonstrate the benefit of DCUs described in Section 3.2, we replace the single-block from the baseline model with multiple DCUs. As Table 1 shows, the number of network parameters can be drastically reduced without harming the reconstruction accuracy. We can even observe a slight performance gain as the network is able to reassemble features more efficiently due to the injection of compression layers. Asymmetric PyramidIn this section we show the ad- vantage of the proposed asymmetric pyramidal architecture. We compare the following constellations while keeping the total number of DCUs constant:



Model
Architecture


Direct
D-D-D-D-S-S


Asymmetric Pyramid
D-D-D-S-D-S
Here, D denotes a dense compression unit with 6 dense layers and S denotes the sub-pixel upsampler. As Table 1 shows, the asymmetric pyramidal architecture considerably improves the reconstruction accuracy compared to direct upsampling. This demonstrates the advantage of utilizing high-dimensional features directly. Furthermore, by assigning more computation in the lower pyramid, the penalty in memory and computation consumption compared to direct upsample approach is significantly reduced. As shown in Table 1, for small model, asymmetric pyramid model achieves the same runtime as direct upsamplinu. Curriculum LearningWe extend the 4-DCU asymmet- ric pyramid model to 8× upsampling to quantify the benefit of curriculum learning over simultaneous multi-scale training. As Table 2 shows, simultaneous training typically has small or even negative impact on the lowest scale (2×), which is also evident in VDSR [20] (see Table 2). On the other hand, curriculum learning always improves the reconstruction quality and outperforms simultaneous training by an average of 0.04dB. Furthermore, curriculum learning considerably shortens the training time. As Figure 4 shows, the network reaches the same number of epochs and quality faster than simultaneous training, since the 2× subnet requires less computation and hence less time for each update. 4.2. Comparison with Other Progressive Architectures: In contrast to our approach, existing progressive methods [21], [22] typically rely on deep supervision. They impose a loss on all scales which can be denoted as \begin{equation*}
\mathcal{L}_{s}^{i}=\sum_{s^{\prime} < s}\ell_{1}(\psi_{s^{\prime}}(y_{i}),\hat{y}_{i}^{s^{\prime}})+\ell_{1}(y_{i}^{s},\hat{y}_{i}^{s}),
\tag{7}
\end{equation*}View Source\begin{equation*}
\mathcal{L}_{s}^{i}=\sum_{s^{\prime} < s}\ell_{1}(\psi_{s^{\prime}}(y_{i}),\hat{y}_{i}^{s^{\prime}})+\ell_{1}(y_{i}^{s},\hat{y}_{i}^{s}),
\tag{7}
\end{equation*} with \psi_{s^{\prime}} being a downsampling operation to scale s^{\prime}. Futhermore, following the structure of a Laplacian pyramid, each level is encouraged to learn the difference between a bicubic upscale of the previous level instead of the upsam-pled LR image. Thus the residual connections are given by \begin{equation*}
\hat{\pmb{y}}^{s}=\hat{\pmb{r}}^{s}+\varphi_{2}(\pmb{y}^{s-1}),
\tag{8}
\end{equation*}View Source\begin{equation*}
\hat{\pmb{y}}^{s}=\hat{\pmb{r}}^{s}+\varphi_{2}(\pmb{y}^{s-1}),
\tag{8}
\end{equation*} where \varphi_{2} denotes an upscaling operator by a factor of 2.
Figure 4: Training time comparison between curriculum learning and multiscale simultaneous learning. We train the multiscale model and plot the PSNR evaluation of the individual scales. The elapsed epoch is encoded as the line color. Because curriculum learning activates the smaller subnets first, it requires much less time to reach the same evaluation quality. 
Table 2: Gain of simultaneous training and curriculum learning w.r.t. Single-scale training on all datasets. The average is computed accounting the number of images in the datasets. Curriculum learning improves the training for all scales while simultaneous training hampers the training of the lowest scale.
We also evaluate such alternative progressive architecture but observed large decrease in PSNR as shown in Table 3. Therefore, we conclude that it is less stable to use varying sub-scale upsampling results as base images compared to fixed interpolated results and that using a downsampling kernel to create the HR label images could introduce undesired artefacts. 4.3. Comparison with State-of-the-Art Approaches: In this section, we provide an extensive quantitative and qualitative comparison with other state-of-the-art approaches. Quantitative ComparisonFor a quantitative compari- son, we benchmark against VDSR [20], DRRN [33], Lap-SRN [21], MsLapSRN [22], EDSR [24]. We obtained models from Lai et al. [22] for 8 × versions of VDSR and DRRN, that have been retrained with 8× data. To produce 8× EDSR results, we extend their 4× model by adding another sub-pixel convolution layer. For training, we follow their practice which means we initialize the weights of the 8× model from the pretrained 4× model. Due to discrepancy in the model size within existing approaches, we divide them into two classes based on whether they have more or less than 5 million parameters. Accordingly’ we provide two models with different sizes, denoted as \mathrm{ProSR}_{s} and \mathrm{ProSR}_{\ell}, to compete in both classes. \mathrm{ProSR}_{s} has 56 dense layers in total with growth-rate k=12 and a total of 3.1M parameters. \mathrm{ProSR}_{\ell} has 104 dense layers with growth-rate k=40 and 15.5M parameters which is roughly a third of the parameters of EDSR. Table 4 summarizes the quantitative comparison with other state-of-the-art approaches in terms of PSNR. An extended list that includes SSIM scores can be found in the supplemental material. As Table 4 shows, \mathrm{ProSR}_{s} achieves the lowest error in most datasets. The very deep model, ProSRl, shows consistent advantage in higher upsampling ratios and is comparable with EDSR in 2×. In general, our progressive design allows to raise the margin in PSNR between our results and the state-of-the art as the upsampling ratio increases. Qualitative ComparisonFirst, we qualitatively compare our method without GAN to other methods that also minimise the \ell_{1} loss or related norms. Figure 7 show results of our method and the most recent state-of-the-art approaches in 4× and 8×.
Figure 5: Comparison of 4× GAN results (best viewed when zoomed in). Our approach is less prone to artefacts and aligns well with the original image. 
Figure 6: Hallucinated details in 8× upsample result with adversarial loss. 
Table 3: Comparison with other progressive approaches.
Concerning our perceptually-driven model with GAN, we compare with SRGAN [23] and EnhanceNet [28]. As Figure 5 shows, the hallucinated details align well with fine structures in the ground truth, even though we do not have an explicit texture matching loss as EnhanceNet [28]. While SRGAN and EnhanceNet can only upscale 4×, our method is able to extend to 8×. Results are shown in Figure 6. We provide an extended qualitative comparison in the supplemental material. 

SECTION 5. Runtime: The asymmetric pyramid architecture contributes to faster runtime compared to other approaches that have similar reconstruction accuracy. In our test environment with NVIDIA TITAN XP and cudnn6.0, \mathrm{ProSR}_{\ell} takes on average 0.8s, 2.1s and 4.4s to upsample a 520 × 520 image by 2×, 4× and 8×. In the NTIRE challenge, we reported the runtime including geometric ensemble, which requires 8 forward passes for each transformed version of the input image. Nonetheless, our runtime is still 5 times faster than the top-ranking team. 

SECTION 6. Ntire Challenge: The “New Trends in Image Restoration and Enhancement” (NTIRE) 2018 super-resolution challenge [35] aims at benchmarking SISR methods in challenging scenarios. In particular, one of the challenge tracks targets 8× upscaling, where the low resolution images are generated with known downsampling kernels (bicubic). We participated in the challenge with the ProSRl network. In addition to the method described above, we utilised the geometry ensemble used in [24], which yielded a 0.07dB PSNR gain in the validation set. Our model ranks 2nd in terms of SSIM and 4th in terms of PSNR. Compared to the top-ranking team, our model is marginally lower by 0.002 and 0.04dB in SSIM and PSNR respectively, but runs 5 times as fast in test time. Other tracks in the challenge target 4× upscaling but consider unknown degradation. Given that this task is different to the bicubic 8× setting, the participating teams and the rankings differ. Without specific adaptation for this scenario, we also participated in these tracks for completeness and ranked in the mid-range (7th/9th/7th). We believe further improvement can be achieved with targeted preprocessing and extended training data. 

SECTION 7. Conclusion: In this work we propose a progressive approach to address SISR. We leverage asymmetric pyramid design and Dense Compression Units in the architecture, both of which lead to improved memory efficiency and reconstruction accuracy. A matching pyramidal discriminator is proposed, which enables optimizing for perceptual quality simultaneously for multiple scale. Furthermore we leverage a form of curriculum learning which not only increases the performance for all scales but also reduces the total training time. Our models sets a new state-of-the-art benchmark in both traditional error measures and perceptual quality.
Figure 7: Visual comparison with other state-of-the-art methods. 
Table 4: Comparison with state-of-the-art approaches. For clarity, we highlight the best approach in blue.