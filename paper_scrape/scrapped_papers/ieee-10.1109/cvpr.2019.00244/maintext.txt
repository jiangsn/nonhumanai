Figure 1: 
Our model allows user control over both semantic and style as synthesizing an image. The semantic (e.g., existence of a tree) is controlled via a label map (visualized in the top row), while the style is controlled via the reference style image (visualized in the leftmost column). Please visit our website for interactive image synthesis demos. 


SECTION 1. Introduction: Conditional image synthesis refers to the task of generating photorealistic images conditioning on some input data. Earlier methods compute the output image by stitching pieces from a database of images [3], [14]. Recent methods directly learn the mapping using neural networks [5, 8, 22, 44, 45, 51, 52, 53], The latter methods are generally faster and require no external database of images. We are interested in a specific form of conditional image synthesis, which is converting a semantic segmentation mask to a photorealistic image. This form has a wide range of applications such as content generation and image editing [8], [22], [45]. We will refer to this form as semantic image synthesis. In this paper, we show that the conventional network architecture [22], [45], which is built by stacking convolutional, normalization, and nonlinearity layers, is at best sub-optimal, because their normalization layers tend to "wash away" information in input semantic masks. To address the issue, we propose spatially-adaptive normalization, a conditional normalization layer that modulates the activations using input semantic layouts through a spatially- adaptive, learned transformation and can effectively propagate the semantic information throughout the network. We conduct experiments on several challenging datasets including the COCO-Stuff [6], [31], the ADE20K [55], and the Cityscapes [10], We show that with the help of our spatially-adaptive normalization layer, a compact network can synthesize significantly better results compared to several state-of-the-art methods. Additionally, an extensive ablation study demonstrates the effectiveness of the proposed normalization layer against several variants for the semantic image synthesis task. Finally, our method supports multimodal and style-guided image synthesis, enabling controllable, diverse outputs as shown in Figure 1. 

SECTION 2. Related Work: Deep generative models can learn to synthesize images. Recent methods include generative adversarial networks (GANs) [13] and variational autoencoder (VAE) [27]. Our work is built on GANs but aims for the conditional image synthesis task. The GANs consist of a generator and a discriminator where the goal of the generator is to produce realistic images so that the discriminator cannot tell the synthesized images apart from real ones. Conditional image synthesis exists in many forms that differ in the type of input data. For example, class-conditional models [4, 5, 34, 36, 38] learn to synthesize images given category labels. Researchers have explored various models for generating images based on text [18], [41], [49], [52], Another widely-used form is image-to-image translation [16, 20, 22, 23, 24, 28, 32, 54, 56, 57], where both input and output are images. In this work, we focus on converting segmentation masks to photorealistic images. We assume the training dataset contains paired segmentation masks and images. With the proposed spatially-adaptive normalization, our compact network achieves better results compared to leading methods. Unconditional normalization layers have been an important component in modern deep networks and can be found in various classifier designs, including the Focal Response Normalization (FRN) in the AlexNet [29] and Batch Normalization (BN) in the Inception-v2 network [21], Other popular normalization layers include the Instance Normalization (IN) [43], Fayer Normalization (FN) [2], Group Normalization (GN) [47], and Weight Normalization (WN) [42]. We label these normalization layers as unconditional as they do not depend on external data in contrast to the conditional normalization layers discussed below. Figure 2: 
In SPADE, the mask is first projected onto an embedding space, and then convolved to produce the modulation parameters γ and β. Unlike prior conditional normalization methods, γ and β are not vectors, but tensors with spatial dimensions. The produced γ and β are multiplied and added to the normalized activation element-wise. 
Conditional normalization layers include the Conditional Batch Normalization (Conditional BN) [12] and Adaptive Instance Normalization (AdaIN) [19]. Both were first used in the style transfer task and later adopted in various vision tasks [5, 9, 11, 20, 25, 34, 36, 39, 46, 51]. Different from the earlier normalization techniques, conditional normalization layers require external data and generally operate as follows. First, layer activations are normalized to zero mean and unit deviation. Then the normalized activations are denonnalized by modulating the activation using a learned affine transformation whose parameters are inferred from external data. For style transfer tasks [12], [19], the affine parameters are used to control the global style of the output, and hence are uniform across spatial coordinates. In contrast, our proposed normalization layer applies a spatially- varying affine transformation, making it suitable for image synthesis from semantic masks. A similar method was found useful for image super-resolution [46]. 

SECTION 3. Semantic Image Synthesis: Fet m  \in {\mathbb{L}^{H \times W}}∈LH×W be a semantic segmentation mask where \mathbb{L}Lis a set of integers denoting the semantic labels, and H and W are the image height and width. Each entry in m denotes the semantic label of a pixel. We aim to learn a mapping function that can convert an input segmentation mask m to a photorealistic image. Spatially-adaptive denormalization. Fet hi denote the activations of the i-th layer of a deep convolutional network for a batch of N samples. Fet Ci be the number of channels in the layer. Let Hi and Wi be the height and width of the activation map in the layer. We propose a new conditional normalization method called SPatially-Adaptive (DE)normalization 1 (SPADE). Similar to Batch Normalization [21], the activation is normalized in the channel-wise manner, and then modulated with learned scale and bias. Figure 2 illustrates the SPADE design. The activation value at site (n ∈ N, c ∈ Ci, y ∈ Hi, x ∈ Wi) is given by
\begin{equation*}\gamma _{c,y,x}^i({\mathbf{m}})\frac{{h_{n,c,y,x}^i - \mu _c^i}}{{\sigma _c^i}} + \beta _{c,y,x}^i({\mathbf{m}})\tag{1}\end{equation*}View Source\begin{equation*}\gamma _{c,y,x}^i({\mathbf{m}})\frac{{h_{n,c,y,x}^i - \mu _c^i}}{{\sigma _c^i}} + \beta _{c,y,x}^i({\mathbf{m}})\tag{1}\end{equation*}
where hin,c,y,x is the activation at the site before normalization, μci and σci are the mean and standard deviation of the activation in channel c: \begin{equation*}\mu _c^i = \frac{1}{{N{H^i}{W^i}}}\sum\limits_{n,y,x} {h_{n,c,y,x}^i} \tag{2}\end{equation*}View Source\begin{equation*}\mu _c^i = \frac{1}{{N{H^i}{W^i}}}\sum\limits_{n,y,x} {h_{n,c,y,x}^i} \tag{2}\end{equation*}\begin{equation*}\sigma _c^i = \sqrt {\frac{1}{{N{H^i}{W^i}}}\sum\limits_{n,y,x} {\left( {{{(h_{n,c,y,x}^i)}^2} - {{(\mu _c^i)}^2}} \right).} } \tag{3}\end{equation*}View Source\begin{equation*}\sigma _c^i = \sqrt {\frac{1}{{N{H^i}{W^i}}}\sum\limits_{n,y,x} {\left( {{{(h_{n,c,y,x}^i)}^2} - {{(\mu _c^i)}^2}} \right).} } \tag{3}\end{equation*}The variables γic,y,x (m) and βic,y,x (m) in (1) are the learned modulation parameters of the normalization layer. In contrast to BatchNorm [21], they depend on the input segmentation mask and vary with respect to the location (y, x). We use the symbol γic,y,x and βic,y,x to denote the functions that convert the input segmentation mask m to the scaling and bias values at the site (c, y, x) in the i-th activation map. We implement the functions γic,y,x and βic,y,x using a simple two-layer convolutional network, whose detail design can be found in the appendix of our \color{Magenta}{\text{arXiv}} version. In fact, SPADE is related to, and is a generalization of several existing normalization layers. First, replacing the segmentation mask m with the image class label and making the modulation parameters spatially-invariant (i.e., \gamma _{c,{y_1},{x_1}}^i \equiv \gamma _{c,{y_2},{x_2}}^iand\beta _{c,{y_1},{x_1}}^i \equiv \beta _{c,{y_2},{x_2}}^i for any y1, y2, ∈ {1,2,…Hi} and x1, x2 ∈ {1, 2, …, Wi} we arrive at the form of Conditional Batch Normalization layer [12]. Indeed, for any spatially-invariant conditional data, our method reduces to Conditional BN. Similarly, we can arrive at AdaIN [ 19] by replacing the segmentation mask with another image, making the modulation parameters spatially- invariant and setting N = 1. As the modulation parameters are adaptive to the input segmentation mask, the proposed SPADE is better suited for semantic image synthesis. SPADE generator. With SPADE, there is no need to feed the segmentation map to the first layer of the generator, since the learned modulation parameters have encoded enough information about the label layout. Therefore, we discard encoder part of the generator, which is commonly used in recent architectures [22], [45]. This simplification results in a more lightweight network. Furthermore, similarly to existing class-conditional generators [34], [36], [51], the new generator can take a random vector as input, enabling a simple and natural way for multi-modal synthesis [20], [57]. Figure 3 
; Comparing results given uniform segmentation maps: while SPADE generator produces plausible textures, pix2pixHD [45] produces identical outputs due to the loss of the semantic information after the normalization layer. 
Figure 4 illustrates our generator architecture, which employs several ResNet blocks [15] with upsampling layers. The modulation parameters of all the normalization layers are learned using SPADE. Since each residual block operates at a different scale, SPADE downsamples the semantic mask to match the spatial resolution. We train the generator with the same multi-scale discriminator and loss function used in pix2pixHD except that we replace the least squared loss term [33] with the hinge loss term [30], [35], [51]. We test several ResNet-based discriminators used in recent unconditional GANs [1], [34], [36] but observe similar results at the cost of a higher GPU memory requirement. Adding the SPADE to the discriminator also yields a similar performance. For the loss function, we observe that removing any loss term in the pix2pixHD loss function lead to degraded generation results. Why does SPADE work better? A short answer is that it can better preserve semantic information against common normalization layers. Specifically, while normalization layers such as the InstanceNorm [43] are essential pieces in almost all the state-of-the-art conditional image synthesis models [45], they tend to wash away semantic information when applied to uniform or flat segmentation masks. Let us consider a simple module that first applies convolution to a segmentation mask and then normalization. Furthermore, let us assume that a segmentation mask with a single label is given as input to the module (e.g., all the pixels have the same label such as sky or grass). Under this setting, the convolution outputs are again uniform with different labels having different uniform values. Now after we apply InstanceNorm to the output, the normalized activation will become all zeros no matter what the input semantic label is given. Therefore, semantic information is totally lost. This limitation applies to a wide range of generator architectures, including pix2pixHD and its variant that concatenates the semantic mask at all intermediate layers, as long as a network applies convolution and then normalization to the semantic mask. In Figure 3, we empirically show this is precisely the case for pix2pixHD. Because a segmentation mask consists of a few uniform regions in general, the issue of information loss emerges when applying normalization. Figure 4: 
In the SPADE generator, each normalization layer uses the segmentation mask to modulate the layer activations. (left) Structure of one residual block with SPADE, (right) The generator contains a series of SPADE residual blocks with upsampling layers. Our architecture achieves better performance with a smaller number of parameters by removing the downsampling layers of leading image-to-image translation networks (pix2pixHD [45]). 
In contrast, the segmentation mask in the SPADE Generator is fed through spatially adaptive modulation without normalization. Only activations from the previous layer are normalized. Hence, the SPADE generator can better preserve semantic information. It enjoys the benefit of normalization without losing the semantic input information. Multi-modal synthesis. By using a random vector as the input of the generator, our architecture provides a simple way for multi-modal synthesis. Namely, one can attach an encoder that processes a real image into a random vector, which will be then fed to the generator. The encoder and generator form a variational autoencoder [27], in which the encoder tries to capture the style of the image, while the generator combines the encoded style and the segmentation mask information via SPADE to reconstruct the original image. The encoder also serves as a style guidance network at test time to capture the style of target images, as used in Figure 1. For training, we add a KL-Divergence loss term [27]. 

SECTION 4. Experiments: Implementation details. We apply the Spectral Norm [35] to all the layers in both the generator and discriminator. The learning rates for the generator and discriminator are set to 0.0001 and 0.0004, respectively [17]. We use the ADAM [2 ] and set β1 = 0, β2 = 0.999. All the experiments are conducted on an NVIDIA DGX1 with 8 V100 GPUs. We use synchronized mean and variance computation, i.e., these statistics are collected from all the GPUs. Datasets. We conduct experiments on several datasets. COCO-Stujf [6] is derived from the COCO dataset [31]. It has 118,000 training images and 5,000 validation images captured from diverse scenes. It has 182 semantic classes. Due to its large diversity, existing image synthesis models perform poorly on this dataset. ADE20K [55] consists of 20,210 training and 2,000 validation images. Similarly to COCO, the dataset contains challenging scenes with 150 semantic classes. ADE20K-outdoor is a subset of the ADE20K dataset that only contains outdoor scenes, used in Qi et al. [4C], Cityscapes dataset [10] contains street scene images in German cities. The training and validation set sizes are 3,000 and 500, respectively. Recent work has achieved photorealistic semantic image synthesis results [40], [44] on the Cityscapes dataset. Flickr Landscapes. We collect 41,000 photos from Flickr and use 1,000 samples for the validation set. Instead of manual annotation, we use a pre-trained DeepLabV2 model [7] to compute the input segmentation masks. We train the competing semantic image synthesis methods on the same training set and report their results on the same validation set for each dataset. Performance metrics. We adopt the evaluation protocol from previous work [8], [45], Specifically, we run a semantic segmentation model on the synthesized images and compare how well the predicted segmentation mask matches the ground truth input. This is based on the intuition that if the output images are realistic then a well-trained semantic segmentation model should be able to predict the ground truth label. For measuring the segmentation accuracy, we use the mean Intersection-over-Union (mIoU) and pixel accuracy (accu) metrics. We use state-of-the-art segmentation networks for each dataset: DeepLabV2 [7], [37] for COCO-Stuff, UperNet101 [48] for ADE20K, and DRN-D-105 [50] for Cityscapes. In addition to segmentation accuracy, we use the Fréchet Inception Distance (FID) [17] to measure the distance between the distributions of synthesized results and the distribution of real images. Figure 5: 
Visual comparison of semantic image synthesis results on the COCO-Stuff dataset. Our method successfully synthesizes realistic details from semantic labels. 
Figure 6: 
Visual comparison of semantic image synthesis results on the ADE20K outdoor and Cityscapes datasets. Our method produces realistic images while respecting the spatial semantic layout at the same time. 
Table 1: 
Our method outperforms current leading methods in semantic segmentation scores (mean IoU and overall pixel accuracy) and FID [17] on all the benchmark datasets. For mIoU and pixel accuracy, higher is better. For FID, lower is better.
Baselines. We compare our method with three leading semantic image synthesis models: the pix2pixHD model [45], the cascaded refinement network model (CRN) [8], and the semi-parametric image synthesis model (SIMS) [40]. pix2pixHD is the current state-of-the-art GAN-based conditional image synthesis framework. CRN uses a deep network that repeatedly refines the output from low to high resolution, while the SIMS takes a semi-parametric approach that composites real segments from a training set and refines the boundaries. Both the CRN and SIMS are mainly trained using image reconstruction loss. For a fair comparison, we train the CRN and pix2pixHD models using the implementations provided by the authors. As synthesizing an image using SIMS requires many queries to the training dataset, it is computationally prohibitive for a large dataset such as COCO-stuff and the full ADE20K. Therefore, we use the result images provided by the authors whenever possible. Quantitative comparisons. As shown in Table 1, our method outperforms the current state-of-the-art methods by a large margin in all the datasets. For COCO-Stuff, our method achieves a mIoU score of 35.2, which is about 1.5 times better than the previous leading method. Our FID is also 2.2 times better than the previous leading method. We note that the SIMS model produces a lower FID score but has poor segmentation performances on the Cityscapes dataset. This is because the SIMS synthesizes an image by first stitching image patches from the training dataset. As using the real image patches, the resulting image distribution can better match the distribution of real images. However, because there is no guarantee that a perfect query (e.g., a person in a particular pose) exists in the dataset, it tends to copy objects with mismatched segments. Figure 7: 
Semantic image synthesis results on the Flickr Landscapes dataset. The images were generated from semantic layout of photographs on Flickr. 
Qualitative results. In Figures 5 and 6, we provide a qualitative comparison of the competing methods. We find that our method produces results with much better visual quality and fewer artifacts, especially for diverse scenes in the COCO-Stuff and ADE20K dataset. When the training dataset size is small, the SIMS model also renders images with good visual quality. However, the depicted content often deviates from the input segmentation mask (e.g., the shape of the swimming pool in the second row of Figure 6). In Figures 7 and 8, we show more example results from the Flickr Landscape and COCO-Stuff datasets. The proposed method can generate diverse scenes with high image fidelity. More results are included in the appendix of our \color{Magenta}{\text{arXiv}} version. Table 2: 
User preference study. The numbers indicate the percentage of users who favor the results of the proposed method over the competing method.
Human evaluation. We use Amazon Mechanical Turk (AMT) to compare the perceived visual fidelity of our method against existing approaches. Specifically, we give the AMT workers an input segmentation mask and two synthesis outputs from different methods and ask them to choose the output image that looks more like a corresponding image of the segmentation mask. The workers are given unlimited time to make the selection. For each comparison, we randomly generate 500 questions for each dataset, and each question is answered by 5 different workers. For quality control, only workers with a lifetime task approval rate greater than 98% can participate in our evaluation. Table 2 shows the evaluation results. We find that users strongly favor our results on all the datasets, especially on the challenging COCO-Stuff and ADE20K datasets. For the Cityscapes, even when all the competing methods achieve high image fidelity, users still prefer our results. Figure 8: 
Semantic image synthesis results on COCO-Stuff. Our method successfully generates realistic images in diverse scenes ranging from animals to sports activities. 
Table 3: 
mIoU scores are boosted when SPADE layers are used, for both the decoder architecture (Figure 4) and encoder-decoder architecture of pix2pixHD++ (our improved baseline over pix2pixHD [45]). On the other hand, simply concatenating semantic input at every layer fails to do so. Moreover, our compact model with smaller depth at all layers outperforms all baselines.
The effectiveness of SPADE. To study the importance of SPADE, we introduce a strong baseline called pix2pixHD++, which combines all the techniques we find useful for enhancing the performance of pix2pixHD except SPADE. We also train models that receive segmentation mask input at all the intermediate layers via concatenation (pix2pixHD++ w/ Concat) in the channel direction. Finally, the model that combines the strong baseline with SPADE is denoted as pix2pixHD++ w/ SPADE. Additionally, we compare models with different capacity by using a different number of convolutional filters in the generator. Table 4: 
: The SPADE generator works with different configurations. We change the input of the generator, the convolutional kernel size acting on the segmentation map, the capacity of the network, and the parameter-free normalization method. The settings used in the paper are boldfaced.
As shown in Table 3 the architectures with the proposed SPADE consistently outperforms its counterparts, in both the decoder-style architecture described in Figure 4 and more traditional encoder-decoder architecture used in pix2pixHD. We also find that concatenating segmentation masks at all intermediate layers, an intuitive alternative to SPADE to provide semantic signal, does not achieve the same performance as SPADE. Furthermore, the decoder- style SPADE generator achieves better performance than the strong baselines even when using a smaller number of parameters. Figure 9: 
Our model attains multimodal synthesis capability when trained with the image encoder. During deployment, by using different random noise, our model synthesizes outputs with diverse appearances but all having the same semantic layouts depicted in the input mask. For reference, the ground truth image is shown inside the input segmentation mask. 
Variations of SPADE generator. Table 4 reports the performance of variations of our generator. First, we compare two types of the input to the generator: random noise or downsampled segmentation maps. We find that both render similar performance, and conclude that the modulation by SPADE alone provides sufficient signal about the input mask. Second, we vary the type of parameter-free normalization layers before applying the modulation parameters. We observe that SPADE works reliably across different normalization methods. Next, we vary the convolutional kernel size acting on the label map, and find that kernel size of 1x1 hurts performance, likely because it prohibits utilizing the context of the label. Lastly, we modify the capacity of the generator network by changing the number of convolutional filters. We present more variations and ablations in the \color{Magenta}{\text{arXiv}} version for more detailed investigation. Multi-modal synthesis. In Figure 9, we show the multimodal image synthesis results on the Flickr Landscape dataset. For the same input segmentation mask, we sample different noise inputs to achieve different outputs. More results are included in the \color{Magenta}{\text{arXiv}} paper. Semantic manipulation and guided image synthesis. In Figure 1, we show an application where a user draws different segmentation masks, and our model renders the corresponding landscape images. Moreover, our model allows users to choose an external style image to control the global appearances of the output image. We achieve it by replacing the input noise with the embedding vector of the style image computed by the image encoder. 

SECTION 5. Conclusion: We have proposed the spatially-adaptive normalization, which utilizes the input semantic layout while performing the affine transformation in the normalization layers. The proposed normalization leads to the first semantic image synthesis model that can produce photorealistic outputs for diverse scenes including indoor, outdoor, landscape, and street scenes. We further demonstrate its application for multi-modal synthesis and guided image synthesis. 
ACKNOWLEDGMENTS: We thank Alexei A. Efros and Jan Kautz for insightful advice. Taesung Park contributed to the work during his internship at NVIDIA. His Ph.D. is supported by a Samsung Scholarship.