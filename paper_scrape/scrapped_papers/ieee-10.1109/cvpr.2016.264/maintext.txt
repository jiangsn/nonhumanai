Figure 1: We train a model to synthesize plausible impact sounds from silent videos, a task that requires implicit knowledge of material properties and physical interactions. In each video, someone probes the scene with a drumstick, hitting and scratching different objects. We show frames from two videos and below them the predicted audio tracks. The locations of these sampled frames are indicated by the dotted lines on the audio track. The predicted audio tracks show seven seconds of sound, corresponding to multiple hits in the videos. 

SECTION 1. Introduction: From the clink of a ceramic mug placed onto a saucer, to the squelch of a shoe pressed into mud, our days are filled with visual experiences accompanied by predictable sounds. On many occasions, these sounds are not just statistically associated with the content of the images - the way, for example, that the sounds of unseen seagulls are associated with a view of a beach - but instead are directly caused by the physical interaction being depicted: you see what is making the sound. We call these events visually indicated sounds, and we propose the task of predicting sound from videos as a way to study physical interactions within a visual scene (Figure 1). To accurately predict a video's held-out soundtrack, an algorithm has to know about the physical properties of what it is seeing and the actions that are being performed. This task implicitly requires material recognition, but unlike traditional work on this problem [4], [36], we never explicitly tell the algorithm about materials. Instead, it learns about them by identifying statistical regularities in the raw audiovisual signal. We take inspiration from the way infants explore the physical properties of a scene by poking and prodding at the objects in front of them [34], [3], a process that may help them learn an intuitive theory of physics [3]. Recent work suggests that the sounds objects make in response to these interactions may play a role in this process [37], [41]. We introduce a dataset that mimics this exploration process, containing hundreds of videos of people hitting, scratching, and prodding objects with a drumstick. To synthesize sound from these videos, we present an algorithm that uses a recurrent neural network to map videos to audio features. It then converts these audio features to a waveform, either by matching them to exemplars in a database and transferring their corresponding sounds, or by parametrically inverting the features. We evaluate the quality of our predicted sounds using a psychophysical study, and we also analyze what our method learned about actions and materials through the task of learning to predict sound.
Figure 2: Greatest hits: Volume 1 dataset. What do these materials sound like when they are struck? we collected 977 videos in which people explore a scene by hitting and scratching materials with a drumstick, comprising 46,577 total actions. Human annotators labeled the actions with material category labels, the location of impact, an action type label (hit vs. Scratch), and a reaction label (shown on right). These labels were used only for analyzing what our sound prediction model learned, not for training it. We show images from a selection of videos from our dataset for a subset of the material categories (here we show examples where it is easy to see the material in question). 


SECTION 2. Related Work: Our work closely relates to research in sound and material perception, and to representation learning. Foley: The idea of adding sound effects to silent movies goes back at least to the 1920s, when Jack Foley and collaborators discovered that they could create convincing sound effects by crumpling paper, snapping lettuce, and shaking cellophane in their studio 1, a method now known as Foley. Our algorithm performs a kind of automatic Foley, synthesizing plausible sound effects without a human in the loop. Sound and Materials: In the classic mathematical work of [25], Kac showed that the shape of a drum could be partially recovered from the sound it makes. Material properties, such as stiffness and density [35], [29], [14], can likewise be determined from impact sounds. Recent work has used these principles to estimate material properties by measuring tiny vibrations in rods and cloth [8], and similar methods have been used to recover sound from high-speed video of a vibrating membrane [9]. Rather than using a camera as an instrument for measuring vibrations, we infer a plausible sound for an action by recognizing what kind of sound this action would normally make in the visually observed scene. Impact sounds have been used in other work to recognize objects and materials. Arnab et al. [2] recently presented a semantic segmentation model that incorporates audio from impact sounds, and showed that audio information could help recognize objects and materials that were ambiguous from visual cues alone. Other work recognizes objects using audio produced by robotic interaction [39]. Sound Synthesis: Our technical approach resembles speech synthesis methods that use neural networks to predict sound features from pre-tokenized text features and then generate a waveform from those features [28]. There are also methods, such as the FoleyAutomatic system, for synthesizing impact sounds from physical simulations [43]. Work in psychology has studied low-dimensional representations for impact sounds [7], and recent work in neuroimaging has shown that silent videos of impact events activate the auditory cortex [19]. Learning Visual Representations from Natural Signals: Previous work has explored the idea of learning visual representations by predicting one aspect of a raw sensory signal from another. For example, [11], [21] learned image representations by predicting the spatial relationship between image patches, and [1], [22] by predicting the egocentric motion between video frames. Several methods have also used temporal proximity as a supervisory signal [31], [17], [45], [44]. Unlike in these approaches, we learn to predict one sensory modality (sound) from another (vision). There has also been work that trains neural networks from multiple modalities. For example, [32] learned a joint model of audio and video. However, while they study speech using an autoencoder, we focus on material interaction, and we use a recurrent neural network to predict sound features from video. A central goal of other methods has been to use a proxy signal (e.g., temporal proximity) to learn a generically useful representation of the world. In our case, we predict a signal - sound - known to be a useful representation for many tasks [14], [35], and we show that the output (i.e. the predicted sound itself, rather than some internal representation in the model) is predictive of material and action classes. 

SECTION 3. The Greatest Hits Dataset: In order to study visually indicated sounds, we collected a dataset containing videos of humans (the authors) probing environments with a drumstick - hitting, scratching, and poking different objects in the scene (Figure 2). We chose to use a drumstick so that we would have a consistent way of generating the sounds. Moreover, since the drumstick does not occlude much of a scene, we can also observe what happens to the object after it is struck. This motion, which we call a reaction, can be important for inferring material properties - a soft cushion, for example, will deform more than a firm one, and the sound it produces will vary with it. Similarly, individual pieces of gravel will scatter when they are hit, and their sound varies with this motion (Figure 2, right). Unlike traditional object- or scene-centric datasets, such as ImageNet [10] or Places [46], where the focus of the image is a full scene, our dataset contains close-up views of a small number of objects. These images reflect the viewpoint of an observer who is focused on the interaction taking place (similar to an egocentric viewpoint). They contain enough detail to see fine-grained texture and the reaction that occurs after the interaction. In some cases, only part of an object is visible, and neither its identity nor other high-level aspects of the scene are easily discernible. Our dataset is also related to robotic manipulation datasets [39], [33], [15]. While one advantage of using a robot is that its actions are highly consistent, having a human collect the data allows us to rapidly (and inexpensively) capture a large number of physical interactions in realworld scenes. We captured 977 videos from indoor (64%) and outdoor scenes (36%). The outdoor scenes often contain materials that scatter and deform, such as grass and leaves, while the indoor scenes contain a variety of hard and soft materials, such as metal, plastic, cloth, and plastic bags. Each video, on average, contains 48 actions (approximately 69% hits and 31% scratches) and lasts 35 seconds. We recorded sound using a shotgun microphone attached to the top of the camera and used a wind cover for outdoor scenes. We used a separate audio recorder, without auto-gain, and we applied a denoising algorithm [20] to each recording. Detecting Impact Onsets: We detected amplitude peaks in the denoised audio, which largely correspond to the onset of impact sounds. We thresholded the amplitude gradient to find an initial set of peaks, then merged nearby peaks with the mean-shift algorithm [13], treating the amplitude as a density and finding the nearest mode for each peak. Finally, we used non-maximal suppression to ensure that onsets were at least 0.25 seconds apart. This is a simple onset-detection method that most often corresponds to drumstick impacts when the impacts are short and contain a single peak 2. In many of our experiments, we use short video clips that are centered on these amplitude peaks.
Figure 3: (a) Cochleagrams for selected classes. We extracted audio centered on each impact sound in the dataset, computed our subband-envelope representation, and then estimated the mean for each class. (b) Confusion matrix derived by classifying sound features. Rows correspond to confusions made for a single category. The row ordering was determined automatically, by similarity in material confusions (see the supplementary material). 
Semantic Annotations: We also collected annotations for a sample of impacts (approximately 62%) using online workers from Amazon Mechanical Turk. These include material labels, action labels (hit vs. scratch), reaction labels, and the pixel location of each impact site. To reduce the number of erroneous labels, we manually removed annotations for material categories that we could not find in the scene. During material labeling, workers chose from finer-grained categories. We then merged similar, frequently confused categories (please see the supplementary material for details). Note that these annotations are used only for analysis: we train our models on raw audio and video. Examples of several material and action classes are shown in Figure 2. 

SECTION 4. Sound Representation: Following work in sound synthesis [40], [30], we compute our sound features by decomposing the waveform into subband envelopes — a simple representation obtained by filtering the waveform and applying a nonlinearity. We apply a bank of 40 band-pass filters spaced on an equivalent rectangular bandwidth (ERB) scale [16] (plus a low- and high-pass filter) and take the Hilbert envelope of the responses. We then downsample these envelopes to 90Hz (approximately 3 samples per frame) and compress them. More specifically, we compute envelope sn(t) from a waveform w(t) and a filter fn by taking:
sn=D(|(w∗fn)+jH(w∗fn)|)c,(1)View Source\begin{equation*}
s_{n}=D(\vert (w\ast f_{n})+jH(w\ast f_{n})\vert)^{c}, \tag{1}
\end{equation*} where H is the Hilbert transform, D denotes downsampling, and the compression constant c=0.3. In the supplementary material, we study how performance varies with the number of frequency channels. The resulting representation is known as a cochleagram. In Figure 3(a), we visualize the mean cochleagram for a selection of material and reaction classes. This reveals, for example, that cloth sounds tend to have more low-frequency energy than those of rock. How well do impact sounds capture material properties in general? To measure this empirically, we trained a linear SVM to predict material class for the sounds in our database, using the subband envelopes as our feature vectors. We resampled our training set so that each class contained an equal number of impacts (260 per class). The resulting material classifier has 45.8% (chance = 5.9%) class-averaged accuracy (i.e., the mean of per-class accuracy values), and its confusion matrix is shown in Figure 3(b). These results suggest that impact sounds convey significant information about materials, and thus if an algorithm could learn to accurately predict these sounds from images, it would have implicit knowledge of material categories. 

SECTION 5. Predicting Visually Indicated Sounds: We formulate our task as a regression problem - one where the goal is to map a sequence of video frames to a sequence of audio features. We solve this problem using a recurrent neural network that takes color and motion information as input and predicts the subband envelopes of an audio waveform. Finally, we generate a waveform from these sound features. Our neural network and synthesis procedure are shown in Figure 4. 5.1. Regressing Sound Features: Given a sequence of input images I1,I2,…,IN, we would like to estimate a corresponding sequence of sound features s⃗ 1,s⃗ 2,…,s⃗ T, where s⃗ t∈R42. These sound features correspond to blocks of the cochleagram shown in Figure 4. We solve this regression problem using a recurrent neural network (RNN) that takes image features computed with a convolutional neural network (CNN) as input. Image RepresentationWe found it helpful to represent motion information explicitly in our model using a two-stream approach [12], [38]. While two-stream models often use optical flow, it is challenging to obtain accurate flow estimates due to the presence of fast, non-rigid motion. Instead, we compute spacetime images for each frame - images whose three channels are grayscale versions of the previous, current, and next frames. This image representation is closely related to 3D video CNNs [23], [26], as derivatives across channels correspond to temporal derivatives.
Figure 4: We train a neural network to map video sequences to sound features. These sound features are subsequently converted into a waveform using either parametric or example-based synthesis. We represent the images using a convolutional network, and the time series using a recurrent neural network. We show a subsequence of images corresponding to one impact. 
For each frame t, we construct an input feature vector xt by concatenating CNN features for the spacetime image at frame t and the color image from the first frame 3:
xt=[ϕ(Ft),ϕ(I1)],(2)View Source\begin{equation*}
x_{t}=[\phi(F_{t}), \phi(I_{1})], \tag{2}
\end{equation*} where ϕ are CNN features obtained from layer fC7 of the AlexNet architecture [27] (its penultimate layer), and Ft is the spacetime image at time t. In our experiments (Section 6), we either initialized the CNN from scratch and trained it jointly with the RNN, or we initialized the CNN with weights from a network trained for ImageNet classification. When we used pretraining, we precomputed the features from the convolutional layers and fine-tuned only the fully connected layers. Sound Prediction ModelWe use a recurrent neural network (RNN) with long short-term memory units (LSTM) [18] that takes CNN features as input. To compensate for the difference between the video and audio sampling rates, we replicate each CNN feature vector k times, where k=⌊T/N⌋ (we use k=3). This results in a sequence of CNN features x1,x2,…,xT that is the same length as the sequence of audio features. At each timestep of the RNN, we use the current image feature vector xt to update the vector of hidden variables ht 4. We then compute sound features by an affine transformation of the hidden variables:
s⃗ t  ht  =  Wht+b=  L(xt,ht−1),(3)View Source\begin{align*}
\vec{s}_{t} \ \ &=\ \ Wh_{t}+b\\
h_{t} \ \ &=\ \ \mathcal{L}(x_{t}, h_{t-1}), \tag{3}
\end{align*} where L is a function that updates the hidden state [18]. During training, we minimize the difference between the predicted and ground-truth predictions at each timestep:
E({s⃗ t})=∑t=1Tρ(∥s⃗ t−s⃗ ~t∥2),(4)View Source\begin{equation*}
E(\{\vec{s}_{t}\})=\sum_{t=1}^{T}\rho(\Vert\vec{s}_{t}-\tilde{\vec{s}}_{t}\Vert_{2}), \tag{4}
\end{equation*} where s⃗ ~t and s⃗ t are the true and predicted sound features at time t, and ρ(r)=log(ϵ+r2) is a robust loss that bounds the error at each timestep (we use ϵ=1/252). We also increase robustness of the loss by predicting the square root of the subband envelopes, rather than the envelope values themselves. To make the learning problem easier, we use PCA to project the 42-dimensional feature vector at each timestep down to a 10-dimensional space, and we predict this lower-dimensional vector. When we evaluate the network, we invert the PCA transformation to obtain sound features. We train the RNN and CNN jointly using stochastic gradient descent with Caffe [24], [12]. We found it helpful for convergence to remove dropout [42] and to clip large gradients. When training from scratch, we augmented the data by applying cropping and mirroring transformations to the videos. We also use multiple LSTM layers (the number depends on the task; please see the supplementary material). 5.2. Generating a Waveform: We consider two methods for generating a waveform from the predicted sound features. The first is the simple parametric synthesis approach of [40], [30], which iteratively imposes the subband envelopes on a sample of white noise (we used just one iteration). This method is useful for examining what information is captured by the audio features, since it represents a fairly direct conversion from features to sound. However, for the task of generating plausible sounds to a human ear, we find it more effective to impose a strong natural sound prior during conversion from features to waveform. Therefore, we also consider an example-based synthesis method that snaps a window of sound features to the closest exemplar in the training set. We form a query vector by concatenating the predicted sound features s⃗ 1,…,s⃗ T (or a subsequence of them), searching for its nearest neighbor in the training set as measured by L1 distance, and transferring the corresponding waveform. 

SECTION 6. Experiments: We applied our sound-prediction model to several tasks, and evaluated it with a combination of human studies and automated metrics. 6.1. Sound Prediction Tasks: In order to study the problem of detection - that is, the task of determining when and whether an action that produces a sound has occurred - separately from the task of sound prediction, we consider two kinds of videos. First, we focus on the prediction problem and consider only videos centered on audio amplitude peaks, which often correspond to impact onsets (Section 3). We train our model to predict sound for 15-frame sequences (0.5 sec.) around each peak. For the second task, which we call the detection problem, we train our model on longer sequences (approximately 2 sec. long) sampled from the training videos with a 0.5-second stride, and we subsequently evaluate this model on full-length videos. Since it can be difficult to discern the precise timing of an impact, we allow the predicted features to undergo small shifts before they are compared to the ground truth. We also introduce a two-frame lag in the RNN output, which allows the model to observe future frames before outputting sound features. Finally, before querying sound features, we apply a coloring procedure to account for statistical differences between the predicted and real sound features (e.g., under-prediction of amplitude), using the silent videos in the test set to estimate the empirical mean and covariance of the network's predictions. For these implementation details, please see the supplementary material. For both tasks, we split the full-length videos into training and test sets (75% training and 25% testing). ModelsFor the prediction task, we compared our model to image-based nearest neighbor search. We computed fc7 features from a CNN pretrained on ImageNet [27] for the center frame of each sequence, which by construction is the frame where the impact sound occurs. We then searched the training set for the best match and transferred its corresponding sound. We considered variations where the CNN features were computed on an RGB image, on (three-frame) spacetime images, and on the concatenation of both features. To understand the influence of different design decisions, we also considered several variations of our model. We included models with and without ImageNet pretraining; with and without spacetime images; and with example-based versus parametric waveform generation. Finally, we included a model where the RNN connections were broken (the hidden state was set to zero between timesteps). For the RNN models that do example-based waveform generation (Section 5.2), we used the centered impacts in the training set as the exemplar database. For the prediction task, we performed the query using the sound features for the entire 15-frame sequence. For the detection task, this is not possible, since the videos may contain multiple, overlapping impacts. Instead, we detected amplitude peaks of the parametrically inverted waveform, and matched the sound features in small (8-frame) windows around each peak (starting the window one frame before the peak).
Figure 5: (a) We measured the rate at which subjects chose an algorithm's synthesized sound over the actual sound. Our full system, which was pretrained from imagenet and used example-based synthesis to generate a waveform, significantly outperformed models based on image matching. For the neural network models, we computed the auditory metrics for the sound features that were predicted by the network, rather than those of the inverted sounds or transferred exemplars. (b) What sounds like what, according to our algorithm? we applied a classifier trained on real sounds to the sounds produced by our algorithm, resulting in a confusion matrix (c.f. Figure 3(b), which shows a confusion matrix for real sounds). It obtained 22.7% class-averaged accuracy. (c) Confusions made by a classifier trained on fc7 features (30.2% class-averaged accuracy). For both confusion matrices, we used the variation of our model that was trained from scratch. 
6.2. Evaluating the Sound Predictions: We assessed the quality of the sounds using psychophysical experiments and measurements of acoustic properties. Psychophysical StudyTo test whether the sounds pro duced by our model varied appropriately with different actions and materials, we conducted a psychophysical study on Amazon Mechanical Turk. We used a two-alternative forced choice test in which participants were asked to distinguish real and fake sounds. We showed them two videos of an impact event - one playing the recorded sound, the other playing a synthesized sound. We then asked them to choose the one that played the real sound. The sound-prediction algorithm was chosen randomly on a per-video basis. We randomly sampled 15 impact-centered sequences from each full-length video, showing each participant at most one impact from each one. At the start of the experiment, we revealed the correct answer to five practice videos. We measured the rate at which participants mistook our model's result for the ground-truth sound (Figure 5(a)), finding that our full system - with RGB and spacetime input, RNN connections, ImageNet pretraining, and example-based waveform generation - significantly outperformed the image-matching methods. It also outperformed a baseline that sampled a random (centered) sound from the training set (p<0.001 with a two-sided t-test). We found that the version of our model that was trained from scratch outperformed the best image-matching method (p=0.02). Finally, for this task, we did not find the difference between our full and RGB-only models to be significant (p=0.08). We show results broken down by semantic category in Figure 7. For some categories, such as grass and leaf, participants were frequently fooled by our results. Often when a participant was fooled, it was because the sound prediction was simple and prototypical (e.g., a simple thud noise), while the actual sound was complex and atypical. True leaf sounds, for example, are highly varied and may not be fully predictable from a silent video. When they are struck, we hear a combination of the leaves themselves, along with rocks, dirt, and whatever else is underneath them. In contrast, the sounds predicted by our model tend to be closer to prototypical grass/dirt/leaf noises. Participants also sometimes made mistakes when the onset detection failed, or when multiple impacts overlapped, since this may have defied their expectation of hearing a single impact.
Figure 6: (a) We ran variations of the full system and an image-matching method (RGB + spacetime). For each model, we include an oracle model (labeled with “+ mat”) that draws its sound examples from videos with the same material label. (b) Class-averaged material recognition accuracy obtained by training an SVM with different image and sound features. 
We found that the model in which the RNN connections were broken was often unable to detect the timing of the hit, and that it under-predicted the amplitude of the sounds. As a result, it performed poorly on automated metrics and failed to find good matches. The performance of our model with parametric waveform generation varied widely between categories. It did well on materials such as leaf and dirt that are suited to the relatively noisy sounds that the method produces but poorly on hard materials such as wood and metal (e.g., a confusion rate of 62%±6% for dirt and 18%±5% for metal). On the other hand, the example-based approach was not effective at matching textural sounds, such as those produced by splashing water (Fig. 7).
Figure 7: Semantic analysis of psychophysical study. We show the rate that our algorithm fooled human participants for each material, action, and reaction class. The error bars show 95% confidence intervals. Our approach significantly outperforms the highest-performing image-matching method (rgb + spacetime). 
Auditory MetricsWe measured quantitative properties of sounds for the prediction task. We chose metrics that were not sensitive to precise timing. First, we measured the loudness of the sound, which we took to be the maximum energy (L2 norm) of the compressed subband envelopes over all timesteps. Second, we compared the sounds' spectral centroids, which we measured by taking the center of mass of the frequency channels for a one-frame (approx. 0.03 sec.) window around the center of the impact. We found that on both metrics, the network was more accurate than the image-matching methods, both in terms of mean squared error and correlation coefficients (Figure 5(a)). Oracle ResultsHow helpful is material category information? We conducted a second study that controlled for material-recognition accuracy. Using the subset of the data with material annotations, we created a model that chose a random sound from the same class as the input video. We also created a number of oracle models that used these material labels (Table 6(a)). For the best-performing image-matching model (RGB + spacetime), we restricted the pool of matches to be those with the same label as the input (and similarly for the example-based synthesis method). We also considered a model that matched the ground-truth sound to the training set and transferred the best match. We found that, while knowing the material was helpful for each method, it was not sufficient, as the oracle models did not outperform our model. In particular, our model significantly outperformed the random-sampling oracle (p<10−4). Impact DetectionWe also used our methods to produce sounds for long, uncentered videos, a problem setting that allows us to evaluate their ability to detect impact events. We provide qualitative examples in Figure 8 and videos in the supplementary material. To quantitatively evaluate its detection accuracy, we used the parametric synthesis method to produce a waveform, applied a large gain to that waveform, and then detected amplitude peaks (Section 3). We then compared the timing of these peaks to those of the ground truth, considering an impact to be detected if a predicted spike occurred within 0.1 seconds of it. Using the predicted amplitude as a measure of confidence, we computed average precision. We compared our model to an RGB-only model, finding that the spacetime images significantly improve the result, with APs of 43.6% and 21.6% respectively. Both models were pretrained with ImageNet. 6.3. Learning about Material and Action by Predicting Sounds: By learning to predict sounds, did the network also learn something about material and physical interactions? To assess this, we tested whether the network's output sounds were informative about material and action class. We applied the same SVM that was trained to predict material/action class on real sound features (Sec. 4) to the sounds predicted by the model. Under this evaluation regime, it is not enough for the network's sounds to merely be distinguishable by class: they must be close enough to real sounds so as to be classified correctly by an SVM that has never seen a predicted sound. To avoid the influence of pretraining, we used a network that was trained from scratch. We note that this evaluation method is different from that of recent unsupervised learning models [11], [1], [45] that train a classifier on the network's feature activations, rather than on a ground-truth version of the output. Using this idea, we classified the material category from predicted sound features. The classifier had class-averaged accuracy of 22.7%, and its confusion matrix is shown in Fig. 5(b). This accuracy indicates that our model learned an output representation that was informative about material, even though it was only trained to predict sound. We applied a similar methodology to classify action categories from predicted sounds, obtaining 68.6% class-averaged accuracy (chance = 50%), and 53.5% for classifying reaction categories (chance = 20%). We found that material and reaction recognition accuracy improved with ImageNet pretraining (to 28.8% and to 55.2%, respectively), but that there was a slight decrease for action classification (to 66.5%). We also tested whether the predicted sound features convey information about the hardness of a surface. We grouped the material classes into superordinate hard and soft classes, and trained a classifier on real sound features (sampling 1300 examples per class), finding that it obtained 66.8% class-averaged accuracy (chance = 50%). Here we have defined soft materials to be {leaf, grass, cloth, plastic bag, carpet} and hard materials to be {gravel, rock, tile, wood, ceramic, plastic, drywall, glass, metal}.
Figure 8: Automatic sound prediction results. We show cochleagrams for a representative selection of video sequences, with a sample frame from each sequence on the left. The frame is sampled from the location indicated by the black triangle on the x-axis of each cochleagram. Notice that the algorithm's synthesized cochleagrams match the general structure of the ground truth cochleagrams. Dark lines in the cochleagrams indicate hits, which the algorithm often detects. The algorithm captures aspects of both the temporal and spectral structure of sounds. It correctly predicts staccato taps in rock example and longer waveforms for rustling ivy. Furthermore, it tends to predict lower pitched thuds for a soft couch and higher pitched clicks when the drumstick hits a hard wooden railing (although the spectral differences may appear small in these visualizations, we evaluate this with objective metrics in Section 6). A common failure mode is that the algorithm misses a hit (railing example) or hallucinates false hits (cushion example). This frequently happens when the drumstick moves erratically. Please see our video for qualitative results. 
We also considered the problem of directly predicting material class from visual features. In Table 6(b), we trained a classifier using fc7 features - both those of the model trained from scratch, and of a model trained on ImageNet [27]. We concatenated color and spacetime image features, since we found that this improved performance. We also considered an oracle model that cropped a high-resolution (256×256) patch from the impact location using human annotations, and concatenated its features with those of the full image (we used color images). To avoid occlusions from the arm or drumstick, we cropped the patch from the final frame of the video. We found that performing these crops significantly increased the accuracy, suggesting that localizing the impact is important for classification. We also tried concatenating vision and sound features (similar to [2]), finding that this significantly improved the accuracy. The kinds of mistakes that the visual classifier (video → material) made were often different from those of the sound classifier (sound → material). For instance, the visual classifier was able to distinguish classes that have a very different appearance, such as paper and cloth. These classes both make low-pitched sounds (e.g., cardboard and cushions), and were sometimes are confused by the sound classifier. On the other hand, the visual classifier was more likely to confuse materials from outdoor scenes, such as rocks and leaves - materials that sound very different but which frequently co-occur in a scene. When we analyzed our model by classifying its sound predictions (video → sound → material), the resulting confusion matrix (Fig. 5(b)) contains both kinds of error: there are visual analysis errors when it misidentifies the material that was struck, and sound synthesis errors when it produces a sound that was not a convincing replica of the real sound. 

SECTION 7. Discussion: In this work, we proposed the problem of synthesizing visually indicated sounds - a problem that requires an algorithm to learn about material properties and physical interactions. We introduced a dataset for studying this task, which contains videos of a person probing materials in the world with a drumstick, and an algorithm based on recurrent neural networks. We evaluated the quality of our approach with psychophysical experiments and automated metrics, showing that the performance of our algorithm was significantly better than baselines. We see our work as opening two possible directions for future research. The first is producing realistic sounds from videos, treating sound production as an end in itself. The second direction is to use sound and material interactions as steps toward physical scene understanding. 
ACKNOWLEDGMENTS: This work was supported by NSF grants 6924450 and 6926677, by Shell, and by a Microsoft Ph.D. Fellowship to A.O. We thank Carl Vondrick and Rui Li for the helpful discussions, and the workers at Middlesex Fells, Arnold Arboretum, and Mt. Auburn Cemetery for not asking too many questions while we were collecting the Greatest Hits dataset.